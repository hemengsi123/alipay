// Code generated by protoc-gen-go. DO NOT EDIT.
// source: alipay.proto

/*
Package pb is a generated protocol buffer package.

It is generated from these files:
	alipay.proto

It has these top-level messages:
	WatchParam
	PrecreateParam
	QueryParam
	RefreshQRParam
	Trade
	StatusChange
	TradeDetail
	FundBill
*/
package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// ID类型
type IDType int32

const (
	IDType_HEX  IDType = 0
	IDType_UTF8 IDType = 1
	IDType_ULID IDType = 2
)

var IDType_name = map[int32]string{
	0: "HEX",
	1: "UTF8",
	2: "ULID",
}
var IDType_value = map[string]int32{
	"HEX":  0,
	"UTF8": 1,
	"ULID": 2,
}

func (x IDType) String() string {
	return proto.EnumName(IDType_name, int32(x))
}
func (IDType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// 交易状态
type TradeStatus int32

const (
	TradeStatus_UNKNOWN   TradeStatus = 0
	TradeStatus_PRECREATE TradeStatus = 1
	TradeStatus_WAIT      TradeStatus = 2
	TradeStatus_SUCCESS   TradeStatus = 3
	TradeStatus_FINISHED  TradeStatus = 4
	TradeStatus_CLOSED    TradeStatus = 5
)

var TradeStatus_name = map[int32]string{
	0: "UNKNOWN",
	1: "PRECREATE",
	2: "WAIT",
	3: "SUCCESS",
	4: "FINISHED",
	5: "CLOSED",
}
var TradeStatus_value = map[string]int32{
	"UNKNOWN":   0,
	"PRECREATE": 1,
	"WAIT":      2,
	"SUCCESS":   3,
	"FINISHED":  4,
	"CLOSED":    5,
}

func (x TradeStatus) String() string {
	return proto.EnumName(TradeStatus_name, int32(x))
}
func (TradeStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// 监控
type WatchParam struct {
	TradeId string `protobuf:"bytes,1,opt,name=trade_id,json=tradeId" json:"trade_id,omitempty"`
}

func (m *WatchParam) Reset()                    { *m = WatchParam{} }
func (m *WatchParam) String() string            { return proto.CompactTextString(m) }
func (*WatchParam) ProtoMessage()               {}
func (*WatchParam) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *WatchParam) GetTradeId() string {
	if m != nil {
		return m.TradeId
	}
	return ""
}

// 创建QR交易的数据
type PrecreateParam struct {
	TradeId     []byte `protobuf:"bytes,1,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`
	IdType      IDType `protobuf:"varint,2,opt,name=id_type,json=idType,enum=alipay.IDType" json:"id_type,omitempty"`
	Subject     string `protobuf:"bytes,3,opt,name=subject" json:"subject,omitempty"`
	AmountInFen int64  `protobuf:"varint,4,opt,name=amount_in_fen,json=amountInFen" json:"amount_in_fen,omitempty"`
}

func (m *PrecreateParam) Reset()                    { *m = PrecreateParam{} }
func (m *PrecreateParam) String() string            { return proto.CompactTextString(m) }
func (*PrecreateParam) ProtoMessage()               {}
func (*PrecreateParam) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PrecreateParam) GetTradeId() []byte {
	if m != nil {
		return m.TradeId
	}
	return nil
}

func (m *PrecreateParam) GetIdType() IDType {
	if m != nil {
		return m.IdType
	}
	return IDType_HEX
}

func (m *PrecreateParam) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *PrecreateParam) GetAmountInFen() int64 {
	if m != nil {
		return m.AmountInFen
	}
	return 0
}

// 查询QR交易的数据
type QueryParam struct {
	TradeId []byte `protobuf:"bytes,1,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`
}

func (m *QueryParam) Reset()                    { *m = QueryParam{} }
func (m *QueryParam) String() string            { return proto.CompactTextString(m) }
func (*QueryParam) ProtoMessage()               {}
func (*QueryParam) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *QueryParam) GetTradeId() []byte {
	if m != nil {
		return m.TradeId
	}
	return nil
}

// 刷新QR的数据
type RefreshQRParam struct {
	TradeId []byte `protobuf:"bytes,1,opt,name=trade_id,json=tradeId,proto3" json:"trade_id,omitempty"`
}

func (m *RefreshQRParam) Reset()                    { *m = RefreshQRParam{} }
func (m *RefreshQRParam) String() string            { return proto.CompactTextString(m) }
func (*RefreshQRParam) ProtoMessage()               {}
func (*RefreshQRParam) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RefreshQRParam) GetTradeId() []byte {
	if m != nil {
		return m.TradeId
	}
	return nil
}

// 交易
type Trade struct {
	Id            []byte                     `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	IdType        IDType                     `protobuf:"varint,2,opt,name=id_type,json=idType,enum=alipay.IDType" json:"id_type,omitempty"`
	Subject       string                     `protobuf:"bytes,3,opt,name=subject" json:"subject,omitempty"`
	AmountInFen   int64                      `protobuf:"varint,4,opt,name=amount_in_fen,json=amountInFen" json:"amount_in_fen,omitempty"`
	QrCode        string                     `protobuf:"bytes,5,opt,name=qr_code,json=qrCode" json:"qr_code,omitempty"`
	Status        TradeStatus                `protobuf:"varint,6,opt,name=status,enum=alipay.TradeStatus" json:"status,omitempty"`
	Detail        *TradeDetail               `protobuf:"bytes,7,opt,name=detail" json:"detail,omitempty"`
	CreatedAt     *google_protobuf.Timestamp `protobuf:"bytes,8,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	StatusChanges []*StatusChange            `protobuf:"bytes,9,rep,name=status_changes,json=statusChanges" json:"status_changes,omitempty"`
}

func (m *Trade) Reset()                    { *m = Trade{} }
func (m *Trade) String() string            { return proto.CompactTextString(m) }
func (*Trade) ProtoMessage()               {}
func (*Trade) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Trade) GetId() []byte {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Trade) GetIdType() IDType {
	if m != nil {
		return m.IdType
	}
	return IDType_HEX
}

func (m *Trade) GetSubject() string {
	if m != nil {
		return m.Subject
	}
	return ""
}

func (m *Trade) GetAmountInFen() int64 {
	if m != nil {
		return m.AmountInFen
	}
	return 0
}

func (m *Trade) GetQrCode() string {
	if m != nil {
		return m.QrCode
	}
	return ""
}

func (m *Trade) GetStatus() TradeStatus {
	if m != nil {
		return m.Status
	}
	return TradeStatus_UNKNOWN
}

func (m *Trade) GetDetail() *TradeDetail {
	if m != nil {
		return m.Detail
	}
	return nil
}

func (m *Trade) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Trade) GetStatusChanges() []*StatusChange {
	if m != nil {
		return m.StatusChanges
	}
	return nil
}

// 交易状态变化
type StatusChange struct {
	SyncedAt *google_protobuf.Timestamp `protobuf:"bytes,1,opt,name=synced_at,json=syncedAt" json:"synced_at,omitempty"`
	Status   TradeStatus                `protobuf:"varint,2,opt,name=status,enum=alipay.TradeStatus" json:"status,omitempty"`
}

func (m *StatusChange) Reset()                    { *m = StatusChange{} }
func (m *StatusChange) String() string            { return proto.CompactTextString(m) }
func (*StatusChange) ProtoMessage()               {}
func (*StatusChange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *StatusChange) GetSyncedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.SyncedAt
	}
	return nil
}

func (m *StatusChange) GetStatus() TradeStatus {
	if m != nil {
		return m.Status
	}
	return TradeStatus_UNKNOWN
}

// 交易详情
type TradeDetail struct {
	TradeNo        string      `protobuf:"bytes,1,opt,name=trade_no,json=tradeNo" json:"trade_no,omitempty"`
	OutTradeNo     string      `protobuf:"bytes,2,opt,name=out_trade_no,json=outTradeNo" json:"out_trade_no,omitempty"`
	BuyerLogonId   string      `protobuf:"bytes,3,opt,name=buyer_logon_id,json=buyerLogonId" json:"buyer_logon_id,omitempty"`
	TradeStatus    string      `protobuf:"bytes,4,opt,name=trade_status,json=tradeStatus" json:"trade_status,omitempty"`
	TotalAmount    string      `protobuf:"bytes,5,opt,name=total_amount,json=totalAmount" json:"total_amount,omitempty"`
	ReceiptAmount  string      `protobuf:"bytes,6,opt,name=receipt_amount,json=receiptAmount" json:"receipt_amount,omitempty"`
	BuyerPayAmount string      `protobuf:"bytes,7,opt,name=buyer_pay_amount,json=buyerPayAmount" json:"buyer_pay_amount,omitempty"`
	PointAmount    string      `protobuf:"bytes,8,opt,name=point_amount,json=pointAmount" json:"point_amount,omitempty"`
	InvoiceAmount  string      `protobuf:"bytes,9,opt,name=invoice_amount,json=invoiceAmount" json:"invoice_amount,omitempty"`
	SendPayDate    string      `protobuf:"bytes,10,opt,name=send_pay_date,json=sendPayDate" json:"send_pay_date,omitempty"`
	StoreId        string      `protobuf:"bytes,11,opt,name=store_id,json=storeId" json:"store_id,omitempty"`
	TerminalId     string      `protobuf:"bytes,12,opt,name=terminal_id,json=terminalId" json:"terminal_id,omitempty"`
	FundBillList   []*FundBill `protobuf:"bytes,13,rep,name=fund_bill_list,json=fundBillList" json:"fund_bill_list,omitempty"`
	StoreName      string      `protobuf:"bytes,14,opt,name=store_name,json=storeName" json:"store_name,omitempty"`
	BuyerUserId    string      `protobuf:"bytes,15,opt,name=buyer_user_id,json=buyerUserId" json:"buyer_user_id,omitempty"`
}

func (m *TradeDetail) Reset()                    { *m = TradeDetail{} }
func (m *TradeDetail) String() string            { return proto.CompactTextString(m) }
func (*TradeDetail) ProtoMessage()               {}
func (*TradeDetail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *TradeDetail) GetTradeNo() string {
	if m != nil {
		return m.TradeNo
	}
	return ""
}

func (m *TradeDetail) GetOutTradeNo() string {
	if m != nil {
		return m.OutTradeNo
	}
	return ""
}

func (m *TradeDetail) GetBuyerLogonId() string {
	if m != nil {
		return m.BuyerLogonId
	}
	return ""
}

func (m *TradeDetail) GetTradeStatus() string {
	if m != nil {
		return m.TradeStatus
	}
	return ""
}

func (m *TradeDetail) GetTotalAmount() string {
	if m != nil {
		return m.TotalAmount
	}
	return ""
}

func (m *TradeDetail) GetReceiptAmount() string {
	if m != nil {
		return m.ReceiptAmount
	}
	return ""
}

func (m *TradeDetail) GetBuyerPayAmount() string {
	if m != nil {
		return m.BuyerPayAmount
	}
	return ""
}

func (m *TradeDetail) GetPointAmount() string {
	if m != nil {
		return m.PointAmount
	}
	return ""
}

func (m *TradeDetail) GetInvoiceAmount() string {
	if m != nil {
		return m.InvoiceAmount
	}
	return ""
}

func (m *TradeDetail) GetSendPayDate() string {
	if m != nil {
		return m.SendPayDate
	}
	return ""
}

func (m *TradeDetail) GetStoreId() string {
	if m != nil {
		return m.StoreId
	}
	return ""
}

func (m *TradeDetail) GetTerminalId() string {
	if m != nil {
		return m.TerminalId
	}
	return ""
}

func (m *TradeDetail) GetFundBillList() []*FundBill {
	if m != nil {
		return m.FundBillList
	}
	return nil
}

func (m *TradeDetail) GetStoreName() string {
	if m != nil {
		return m.StoreName
	}
	return ""
}

func (m *TradeDetail) GetBuyerUserId() string {
	if m != nil {
		return m.BuyerUserId
	}
	return ""
}

// 交易支付使用的资金渠道
type FundBill struct {
	FundChannel string `protobuf:"bytes,1,opt,name=fund_channel,json=fundChannel" json:"fund_channel,omitempty"`
	Amount      string `protobuf:"bytes,2,opt,name=amount" json:"amount,omitempty"`
	RealAmount  string `protobuf:"bytes,3,opt,name=real_amount,json=realAmount" json:"real_amount,omitempty"`
	FundType    string `protobuf:"bytes,4,opt,name=fund_type,json=fundType" json:"fund_type,omitempty"`
}

func (m *FundBill) Reset()                    { *m = FundBill{} }
func (m *FundBill) String() string            { return proto.CompactTextString(m) }
func (*FundBill) ProtoMessage()               {}
func (*FundBill) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *FundBill) GetFundChannel() string {
	if m != nil {
		return m.FundChannel
	}
	return ""
}

func (m *FundBill) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *FundBill) GetRealAmount() string {
	if m != nil {
		return m.RealAmount
	}
	return ""
}

func (m *FundBill) GetFundType() string {
	if m != nil {
		return m.FundType
	}
	return ""
}

func init() {
	proto.RegisterType((*WatchParam)(nil), "alipay.WatchParam")
	proto.RegisterType((*PrecreateParam)(nil), "alipay.PrecreateParam")
	proto.RegisterType((*QueryParam)(nil), "alipay.QueryParam")
	proto.RegisterType((*RefreshQRParam)(nil), "alipay.RefreshQRParam")
	proto.RegisterType((*Trade)(nil), "alipay.Trade")
	proto.RegisterType((*StatusChange)(nil), "alipay.StatusChange")
	proto.RegisterType((*TradeDetail)(nil), "alipay.TradeDetail")
	proto.RegisterType((*FundBill)(nil), "alipay.FundBill")
	proto.RegisterEnum("alipay.IDType", IDType_name, IDType_value)
	proto.RegisterEnum("alipay.TradeStatus", TradeStatus_name, TradeStatus_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Alipay service

type AlipayClient interface {
	// 创建预交易
	PrecreateTrade(ctx context.Context, in *PrecreateParam, opts ...grpc.CallOption) (*Trade, error)
	// 查询交易
	QueryTrade(ctx context.Context, in *QueryParam, opts ...grpc.CallOption) (*Trade, error)
	// 刷新预交易的QR
	RefreshQR(ctx context.Context, in *RefreshQRParam, opts ...grpc.CallOption) (*Trade, error)
	// 监控交易变化
	WatchTrade(ctx context.Context, in *WatchParam, opts ...grpc.CallOption) (Alipay_WatchTradeClient, error)
}

type alipayClient struct {
	cc *grpc.ClientConn
}

func NewAlipayClient(cc *grpc.ClientConn) AlipayClient {
	return &alipayClient{cc}
}

func (c *alipayClient) PrecreateTrade(ctx context.Context, in *PrecreateParam, opts ...grpc.CallOption) (*Trade, error) {
	out := new(Trade)
	err := grpc.Invoke(ctx, "/alipay.Alipay/PrecreateTrade", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alipayClient) QueryTrade(ctx context.Context, in *QueryParam, opts ...grpc.CallOption) (*Trade, error) {
	out := new(Trade)
	err := grpc.Invoke(ctx, "/alipay.Alipay/QueryTrade", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alipayClient) RefreshQR(ctx context.Context, in *RefreshQRParam, opts ...grpc.CallOption) (*Trade, error) {
	out := new(Trade)
	err := grpc.Invoke(ctx, "/alipay.Alipay/RefreshQR", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *alipayClient) WatchTrade(ctx context.Context, in *WatchParam, opts ...grpc.CallOption) (Alipay_WatchTradeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Alipay_serviceDesc.Streams[0], c.cc, "/alipay.Alipay/WatchTrade", opts...)
	if err != nil {
		return nil, err
	}
	x := &alipayWatchTradeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Alipay_WatchTradeClient interface {
	Recv() (*Trade, error)
	grpc.ClientStream
}

type alipayWatchTradeClient struct {
	grpc.ClientStream
}

func (x *alipayWatchTradeClient) Recv() (*Trade, error) {
	m := new(Trade)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Alipay service

type AlipayServer interface {
	// 创建预交易
	PrecreateTrade(context.Context, *PrecreateParam) (*Trade, error)
	// 查询交易
	QueryTrade(context.Context, *QueryParam) (*Trade, error)
	// 刷新预交易的QR
	RefreshQR(context.Context, *RefreshQRParam) (*Trade, error)
	// 监控交易变化
	WatchTrade(*WatchParam, Alipay_WatchTradeServer) error
}

func RegisterAlipayServer(s *grpc.Server, srv AlipayServer) {
	s.RegisterService(&_Alipay_serviceDesc, srv)
}

func _Alipay_PrecreateTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrecreateParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlipayServer).PrecreateTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alipay.Alipay/PrecreateTrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlipayServer).PrecreateTrade(ctx, req.(*PrecreateParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Alipay_QueryTrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlipayServer).QueryTrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alipay.Alipay/QueryTrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlipayServer).QueryTrade(ctx, req.(*QueryParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Alipay_RefreshQR_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshQRParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AlipayServer).RefreshQR(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/alipay.Alipay/RefreshQR",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AlipayServer).RefreshQR(ctx, req.(*RefreshQRParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _Alipay_WatchTrade_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchParam)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(AlipayServer).WatchTrade(m, &alipayWatchTradeServer{stream})
}

type Alipay_WatchTradeServer interface {
	Send(*Trade) error
	grpc.ServerStream
}

type alipayWatchTradeServer struct {
	grpc.ServerStream
}

func (x *alipayWatchTradeServer) Send(m *Trade) error {
	return x.ServerStream.SendMsg(m)
}

var _Alipay_serviceDesc = grpc.ServiceDesc{
	ServiceName: "alipay.Alipay",
	HandlerType: (*AlipayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PrecreateTrade",
			Handler:    _Alipay_PrecreateTrade_Handler,
		},
		{
			MethodName: "QueryTrade",
			Handler:    _Alipay_QueryTrade_Handler,
		},
		{
			MethodName: "RefreshQR",
			Handler:    _Alipay_RefreshQR_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchTrade",
			Handler:       _Alipay_WatchTrade_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "alipay.proto",
}

func init() { proto.RegisterFile("alipay.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 884 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x55, 0xdd, 0x8e, 0xdb, 0x44,
	0x14, 0x5e, 0x3b, 0x59, 0x27, 0x3e, 0x76, 0x8c, 0x35, 0xa0, 0x62, 0x16, 0xa1, 0xa6, 0x16, 0x55,
	0xa3, 0x56, 0x4a, 0x61, 0x8b, 0x80, 0x8a, 0xab, 0x34, 0xc9, 0xaa, 0x16, 0xab, 0x34, 0x75, 0xb2,
	0x5a, 0xd4, 0x1b, 0x6b, 0x12, 0x4f, 0x76, 0x8d, 0x1c, 0x8f, 0x6b, 0x8f, 0x91, 0x7c, 0xcd, 0x1b,
	0xf0, 0x1c, 0xbc, 0x14, 0x97, 0xbc, 0x05, 0x9a, 0x1f, 0x27, 0xd9, 0x5d, 0xa4, 0xdc, 0xf5, 0x2a,
	0x9e, 0xef, 0x7c, 0x67, 0xce, 0x97, 0x33, 0xdf, 0x9c, 0x01, 0x1b, 0xa7, 0x49, 0x8e, 0xeb, 0x61,
	0x5e, 0x50, 0x46, 0x91, 0x21, 0x57, 0x67, 0x8f, 0x6f, 0x28, 0xbd, 0x49, 0xc9, 0x4b, 0x81, 0xae,
	0xaa, 0xcd, 0x4b, 0x96, 0x6c, 0x49, 0xc9, 0xf0, 0x36, 0x97, 0x44, 0xff, 0x19, 0xc0, 0x35, 0x66,
	0xeb, 0xdb, 0x39, 0x2e, 0xf0, 0x16, 0x7d, 0x05, 0x5d, 0x56, 0xe0, 0x98, 0x44, 0x49, 0xec, 0x69,
	0x7d, 0x6d, 0x60, 0x86, 0x1d, 0xb1, 0x0e, 0x62, 0xff, 0x2f, 0x0d, 0x9c, 0x79, 0x41, 0xd6, 0x05,
	0xc1, 0x8c, 0xfc, 0x3f, 0xdb, 0xde, 0xb1, 0xd1, 0x33, 0xe8, 0x24, 0x71, 0xc4, 0xea, 0x9c, 0x78,
	0x7a, 0x5f, 0x1b, 0x38, 0xe7, 0xce, 0x50, 0xe9, 0x0b, 0x26, 0xcb, 0x3a, 0x27, 0xa1, 0x91, 0xc4,
	0xfc, 0x17, 0x79, 0xd0, 0x29, 0xab, 0xd5, 0xef, 0x64, 0xcd, 0xbc, 0x96, 0x2c, 0xa8, 0x96, 0xc8,
	0x87, 0x1e, 0xde, 0xd2, 0x2a, 0x63, 0x51, 0x92, 0x45, 0x1b, 0x92, 0x79, 0xed, 0xbe, 0x36, 0x68,
	0x85, 0x96, 0x04, 0x83, 0xec, 0x82, 0x64, 0x5c, 0xfd, 0xfb, 0x8a, 0x14, 0xf5, 0x31, 0x3d, 0xfe,
	0x0b, 0x70, 0x42, 0xb2, 0x29, 0x48, 0x79, 0xfb, 0x3e, 0x3c, 0x4a, 0xfe, 0x57, 0x87, 0xd3, 0x25,
	0xff, 0x46, 0x0e, 0xe8, 0xbb, 0xb0, 0x9e, 0x7c, 0xaa, 0xbf, 0x85, 0xbe, 0x84, 0xce, 0xc7, 0x22,
	0x5a, 0xd3, 0x98, 0x78, 0xa7, 0x22, 0xdb, 0xf8, 0x58, 0x8c, 0x69, 0x4c, 0xd0, 0x0b, 0x30, 0x4a,
	0x86, 0x59, 0x55, 0x7a, 0x86, 0x28, 0xff, 0x79, 0x53, 0x5e, 0xc8, 0x5d, 0x88, 0x50, 0xa8, 0x28,
	0x9c, 0x1c, 0x13, 0x86, 0x93, 0xd4, 0xeb, 0xf4, 0xb5, 0x81, 0x75, 0x8f, 0x3c, 0x11, 0xa1, 0x50,
	0x51, 0xd0, 0x6b, 0x00, 0x79, 0xb4, 0x71, 0x84, 0x99, 0xd7, 0x15, 0x09, 0x67, 0x43, 0xe9, 0x9e,
	0x61, 0xe3, 0x9e, 0xe1, 0xb2, 0x71, 0x4f, 0x68, 0x2a, 0xf6, 0x88, 0xa1, 0x5f, 0xc0, 0x91, 0x15,
	0xa3, 0xf5, 0x2d, 0xce, 0x6e, 0x48, 0xe9, 0x99, 0xfd, 0xd6, 0xc0, 0x3a, 0xff, 0xa2, 0xa9, 0x27,
	0x75, 0x8d, 0x45, 0x30, 0xec, 0x95, 0x07, 0xab, 0xd2, 0x67, 0x60, 0x1f, 0x86, 0xd1, 0x4f, 0x60,
	0x96, 0x75, 0xb6, 0x96, 0x32, 0xb4, 0xa3, 0x32, 0xba, 0x92, 0x3c, 0x62, 0x07, 0xad, 0xd1, 0x8f,
	0xb6, 0xc6, 0xff, 0xbb, 0x0d, 0xd6, 0x41, 0x17, 0xf6, 0x66, 0xc8, 0xe8, 0x1d, 0xdf, 0xcf, 0x28,
	0xea, 0x83, 0x4d, 0x2b, 0x16, 0xed, 0xc2, 0xba, 0x08, 0x03, 0xad, 0xd8, 0x52, 0x31, 0xbe, 0x05,
	0x67, 0x55, 0xd5, 0xa4, 0x88, 0x52, 0x7a, 0x43, 0x33, 0xee, 0x27, 0x79, 0xe4, 0xb6, 0x40, 0x2f,
	0x39, 0x18, 0xc4, 0xe8, 0x09, 0xd8, 0x72, 0x0f, 0xa5, 0xb2, 0x2d, 0x38, 0x16, 0xdb, 0xab, 0x13,
	0x14, 0xca, 0x70, 0x1a, 0x49, 0x2f, 0xa8, 0xb3, 0xb7, 0x04, 0x36, 0x12, 0x10, 0x7a, 0x0a, 0x4e,
	0x41, 0xd6, 0x24, 0xc9, 0x59, 0x43, 0x32, 0x04, 0xa9, 0xa7, 0x50, 0x45, 0x1b, 0x80, 0x2b, 0x25,
	0xe5, 0xb8, 0x6e, 0x88, 0x1d, 0x41, 0x94, 0x52, 0xe7, 0xb8, 0x56, 0xcc, 0x27, 0x60, 0xe7, 0x34,
	0xc9, 0x76, 0xdb, 0x75, 0x65, 0x4d, 0x81, 0xed, 0x6b, 0x26, 0xd9, 0x1f, 0x34, 0x59, 0x93, 0x86,
	0x64, 0xca, 0x9a, 0x0a, 0x55, 0x34, 0x1f, 0x7a, 0x25, 0xc9, 0x62, 0x51, 0x32, 0xc6, 0x8c, 0x78,
	0x20, 0xb7, 0xe2, 0xe0, 0x1c, 0xd7, 0x13, 0xcc, 0x08, 0xef, 0x73, 0xc9, 0x68, 0x21, 0x2e, 0x9d,
	0xa5, 0xee, 0x05, 0x5f, 0x07, 0x31, 0x7a, 0x0c, 0x16, 0x23, 0xc5, 0x36, 0xc9, 0x70, 0xca, 0xa3,
	0xb6, 0x6c, 0x73, 0x03, 0x05, 0x31, 0xfa, 0x11, 0x9c, 0x4d, 0x95, 0xc5, 0xd1, 0x2a, 0x49, 0xd3,
	0x28, 0x4d, 0x4a, 0xe6, 0xf5, 0x84, 0xcd, 0xdc, 0xe6, 0xa0, 0x2f, 0xaa, 0x2c, 0x7e, 0x93, 0xa4,
	0x69, 0x68, 0x6f, 0xd4, 0xd7, 0x65, 0x52, 0x32, 0xf4, 0x0d, 0x80, 0xac, 0x99, 0xe1, 0x2d, 0xf1,
	0x1c, 0xb1, 0xaf, 0x29, 0x90, 0x19, 0xde, 0x12, 0x2e, 0x5b, 0xb6, 0xaa, 0x2a, 0x49, 0xc1, 0x2b,
	0x7f, 0x26, 0x65, 0x0b, 0xf0, 0xaa, 0x24, 0x45, 0x10, 0xfb, 0x7f, 0x6a, 0xd0, 0x6d, 0x76, 0xe7,
	0x1d, 0x13, 0x3a, 0xb8, 0xd9, 0x33, 0x92, 0x2a, 0xbf, 0x58, 0x1c, 0x1b, 0x4b, 0x08, 0x3d, 0x02,
	0x43, 0x75, 0x4a, 0xba, 0x45, 0xad, 0xf8, 0x7f, 0x2c, 0xc8, 0xfe, 0x7c, 0xa5, 0x4d, 0x80, 0x43,
	0xaa, 0x87, 0x5f, 0x83, 0x29, 0xf6, 0x16, 0x13, 0x46, 0x3a, 0xa4, 0xcb, 0x01, 0x3e, 0x53, 0x9e,
	0x3f, 0x05, 0x43, 0x4e, 0x19, 0xd4, 0x81, 0xd6, 0xdb, 0xe9, 0x6f, 0xee, 0x09, 0xea, 0x42, 0xfb,
	0x6a, 0x79, 0xf1, 0xb3, 0xab, 0x89, 0xaf, 0xcb, 0x60, 0xe2, 0xea, 0xcf, 0x3f, 0x28, 0x6b, 0x2b,
	0x53, 0x59, 0xd0, 0xb9, 0x9a, 0xfd, 0x3a, 0x7b, 0x77, 0x3d, 0x73, 0x4f, 0x50, 0x0f, 0xcc, 0x79,
	0x38, 0x1d, 0x87, 0xd3, 0xd1, 0x72, 0x2a, 0x93, 0xae, 0x47, 0xc1, 0xd2, 0xd5, 0x39, 0x6b, 0x71,
	0x35, 0x1e, 0x4f, 0x17, 0x0b, 0xb7, 0x85, 0x6c, 0xe8, 0x5e, 0x04, 0xb3, 0x60, 0xf1, 0x76, 0x3a,
	0x71, 0xdb, 0x08, 0xc0, 0x18, 0x5f, 0xbe, 0x5b, 0x4c, 0x27, 0xee, 0xe9, 0xf9, 0x3f, 0x1a, 0x18,
	0x23, 0xd1, 0x6d, 0xf4, 0xfa, 0xe0, 0x39, 0x90, 0xc3, 0xf2, 0x51, 0x73, 0x10, 0x77, 0x9f, 0x89,
	0xb3, 0xde, 0x9d, 0x9b, 0xe8, 0x9f, 0xa0, 0xef, 0xd5, 0xd4, 0x96, 0x69, 0xa8, 0x09, 0xef, 0x27,
	0xf9, 0xc3, 0x94, 0x1f, 0xc0, 0xdc, 0xcd, 0xef, 0x7d, 0xa1, 0xbb, 0x23, 0xfd, 0x61, 0xd6, 0x2b,
	0xf5, 0xb8, 0xdd, 0x2b, 0xb4, 0x7f, 0xf0, 0x1e, 0xa4, 0x7c, 0xa7, 0xbd, 0x69, 0x7f, 0xd0, 0xf3,
	0xd5, 0xca, 0x10, 0xc3, 0xe6, 0xd5, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0xed, 0xbd, 0x64, 0xe5,
	0x57, 0x07, 0x00, 0x00,
}
